
# *************************************************************************************************************************************************
# --------------------------------------------------------------------------------------------------------------------------------------
# Connection Details
# --------------------------------------------------------------------------------------------------------------------------------------
# *************************************************************************************************************************************************

- name: 🛰️  START - CREATE MERGE RULE
  debug: 
    msg="{{ lookup('pipe','date +%d.%m.%Y---%H:%M:%S') }}"


- name: Log
  shell: |
    export MESSAGE="Create Topology Merge Rules"
    export currentDate=$(date +%Y-%m-%d_%H:%M)
    echo "---------------------------------------------------------------------------------------------------------------------------------------------------" >> ../install_{{current_feature.kind}}.log
    echo $currentDate" - "$MESSAGE  >> ../install_{{current_feature.kind}}.log
  ignore_errors: true

- name: 📣 OCP CONSOLE - Create Openshift NOTIFICATION
  shell: |
    cat <<EOF | oc apply -f -
    apiVersion: console.openshift.io/v1
    kind: ConsoleNotification
    metadata:
      name: ibm-aiops-notification-status
    spec:
      backgroundColor: '#ffd500'
      color: '#000'
      location: {{global_config.position_ocp_notifications | default("BannerTop")}}
      text: 'Installing {{current_feature.kind}} - Create Topology Merge Rules'    
    EOF
  ignore_errors: true
  args:
    executable: /bin/bash
  when: global_config.create_ocp_notifications | default(true) == true  





# --------------------------------------------------------------------------------------------------------------------------------------
# AIOPS
# --------------------------------------------------------------------------------------------------------------------------------------
- name: 🚀 TOPOLOGY - CREATE BUSINESS CRITICALITIES
  shell: |
    set -x
        
    echo "Create CREATE BUSINESS CRITICALITIES"
    export AIOPS_NAMESPACE=$(oc get po -A|grep aiops-orchestrator-controller |awk '{print$1}')

    export TOPOLOGY_REST_USR=$(oc get secret aiops-topology-asm-credentials -n $AIOPS_NAMESPACE -o jsonpath='{.data.username}' | base64 --decode)
    export TOPOLOGY_REST_PWD=$(oc get secret aiops-topology-asm-credentials -n $AIOPS_NAMESPACE -o jsonpath='{.data.password}' | base64 --decode)
    # oc create route passthrough topology-manage -n $AIOPS_NAMESPACE --service=aiops-topology-topology --port=https-topology-api
    export TOPO_MGT_ROUTE="https://"$(oc get route -n $AIOPS_NAMESPACE aiops-topology-topology -o jsonpath={.spec.host})

 
    export LOGIN="$TOPOLOGY_REST_USR:$TOPOLOGY_REST_PWD"

    echo "    URL: $TOPO_MGT_ROUTE/1.0/topology/metadata"
    echo "    LOGIN: $LOGIN"

        
    curl -XPOST -k \
    "$TOPO_MGT_ROUTE/1.0/topology/metadata" \
    -H 'accept: application/json' \
    -H 'content-type: application/json' \
    -H 'X-TenantID: cfd95b7e-3bc7-4006-a4a8-a73a79c71255' \
    -u $LOGIN \
    -d '    {

      "name": "Platinum",
      "keyIndexName": "aiopsBusinessCriticalityMetadata::platinum",
      "description": "Platinum priority",
      "entityTypes": [
        "AIOPS_BUSINESS_CRITICALITY"
      ],
      "businessCriticalityValue": 100,
      "tags": [
        "ASM_UI_CONFIG"
      ]
    }'


    curl -XPOST -k \
    "$TOPO_MGT_ROUTE/1.0/topology/metadata" \
    -H 'accept: application/json' \
    -H 'content-type: application/json' \
    -H 'X-TenantID: cfd95b7e-3bc7-4006-a4a8-a73a79c71255' \
    -u $LOGIN \
    -d '    {

      "name": "Gold",
      "keyIndexName": "aiopsBusinessCriticalityMetadata::gold",
      "description": "Gold priority",
      "de   scription": "Gold priority",
      "entityTypes": [
        "AIOPS_BUSINESS_CRITICALITY"
      ],
      "businessCriticalityValue": 75,
      "tags": [
        "ASM_UI_CONFIG"
      ]
    }'

      curl -XPOST -k \
    "$TOPO_MGT_ROUTE/1.0/topology/metadata" \
    -H 'accept: application/json' \
    -H 'content-type: application/json' \
    -H 'X-TenantID: cfd95b7e-3bc7-4006-a4a8-a73a79c71255' \
    -u $LOGIN \
    -d '    {

      "name": "Silver",
      "keyIndexName": "aiopsBusinessCriticalityMetadata::silver",
      "description": "Silver priority",
      "entityTypes": [
        "AIOPS_BUSINESS_CRITICALITY"
      ],
      "businessCriticalityValue": 50,
      "tags": [
        "ASM_UI_CONFIG"
      ]
    }'


    curl -XPOST -k \
    "$TOPO_MGT_ROUTE/1.0/topology/metadata" \
    -H 'accept: application/json' \
    -H 'content-type: application/json' \
    -H 'X-TenantID: cfd95b7e-3bc7-4006-a4a8-a73a79c71255' \
    -u $LOGIN \
    -d '    {

      "name": "Bronze",
      "keyIndexName": "aiopsBusinessCriticalityMetadata::bronze",
      "description": "Bronze priority",
      "entityTypes": [
        "AIOPS_BUSINESS_CRITICALITY"
      ],
      "businessCriticalityValue": 25,
      "tags": [
        "ASM_UI_CONFIG"
      ]
    }'

    curl -XPOST -k \
    "$TOPO_MGT_ROUTE/1.0/topology/metadata" \
    -H 'accept: application/json' \
    -H 'content-type: application/json' \
    -H 'X-TenantID: cfd95b7e-3bc7-4006-a4a8-a73a79c71255' \
    -u $LOGIN \
    -d '    {

      "name": "Bronze",
      "keyIndexName": "aiopsBusinessCriticalityMetadata::none",
      "description": "Lowes priority",
      "entityTypes": [
        "AIOPS_BUSINESS_CRITICALITY"
      ],
      "businessCriticalityValue": 1,
      "tags": [
        "ASM_UI_CONFIG"
      ]
    }'
  register: output_string
  ignore_errors: true
  args:
    executable: /bin/bash







# --------------------------------------------------------------------------------------------------------------------------------------
# RISK PROXIMITY TOPOLOGY
# --------------------------------------------------------------------------------------------------------------------------------------



- name: 🚀 TOPOLOGY - CREATE RISK TOPOLOGY OBSERVERS
  shell: |
    set -x



      echo "----------------------------------------------------------------------------------------------------------"
      echo "----------------------------------------------------------------------------------------------------------"
      echo "🚀 TOPOLOGY - COPY RISK TOPOLOGY TO POD - $TOPOLOGY_NAME"
      echo "----------------------------------------------------------------------------------------------------------"
      echo "Create Custom Topology - Copy Topology to File Observer"

      export TOPOLOGY_NAME=risk-proximity
      cd ansible

      # Get FILE_OBSERVER_POD
      FILE_OBSERVER_POD=$(oc get po -n $AIOPS_NAMESPACE -l app.kubernetes.io/instance=aiops-topology,app.kubernetes.io/name=file-observer -o jsonpath='{.items[0].metadata.name}')
      echo $FILE_OBSERVER_POD
      LOAD_FILE_NAME=$TOPOLOGY_NAME"-file.txt"

      OS=$(uname -s | tr '[:upper:]' '[:lower:]')
      if [[ "${OS}" == "darwin" ]]; then
            echo "MAC"
            FILE_OBSERVER_CAP=$(pwd)"/roles/ibm-aiops-demo-content/templates/topology/$LOAD_FILE_NAME"
      else
            FILE_OBSERVER_CAP="{{role_path}}/templates/topology/$LOAD_FILE_NAME"
      fi    
      echo $FILE_OBSERVER_POD
      echo $FILE_OBSERVER_CAP
      echo $TARGET_FILE_PATH
      TARGET_FILE_PATH="/opt/ibm/netcool/asm/data/file-observer/${LOAD_FILE_NAME}"
      echo "  Copying capture file [${FILE_OBSERVER_CAP}] to file observer pod"
      echo "oc cp -n $AIOPS_NAMESPACE ${FILE_OBSERVER_CAP} ${FILE_OBSERVER_POD}:${TARGET_FILE_PATH}"
      oc cp -n $AIOPS_NAMESPACE ${FILE_OBSERVER_CAP} ${FILE_OBSERVER_POD}:${TARGET_FILE_PATH}






      echo "----------------------------------------------------------------------------------------------------------"
      echo "----------------------------------------------------------------------------------------------------------"
      echo "🚀 TOPOLOGY - CREATE OVERLAY TOPOLOGY - $TOPOLOGY_NAME"
      echo "----------------------------------------------------------------------------------------------------------"
      echo "Create Custom Topology - Create File Observer Job"


      export AIOPS_NAMESPACE=$(oc get po -A|grep aiops-orchestrator-controller |awk '{print$1}')
      LOAD_FILE_NAME=$TOPOLOGY_NAME"-file.txt"
      TARGET_FILE_PATH="/opt/ibm/netcool/asm/data/file-observer/${LOAD_FILE_NAME}"


      # Get Credentials
      export TOPO_REST_USR=$(oc get secret aiops-topology-asm-credentials -n $AIOPS_NAMESPACE -o jsonpath='{.data.username}' | base64 --decode)
      export TOPO_REST_PWD=$(oc get secret aiops-topology-asm-credentials -n $AIOPS_NAMESPACE -o jsonpath='{.data.password}' | base64 --decode)
      export LOGIN="$TOPO_REST_USR:$TOPO_REST_PWD"

      export TOPO_ROUTE="https://"$(oc get route -n $AIOPS_NAMESPACE aiops-topology-file-observer -o jsonpath={.spec.host})
      export JOB_ID=$TOPOLOGY_NAME"-topology"

      echo "  URL: $TOPO_ROUTE"
      echo "  LOGIN: $LOGIN"
      echo "  JOB_ID: $JOB_ID"


      # Get FILE_OBSERVER JOB
      curl -X "POST" "$TOPO_ROUTE/1.0/file-observer/jobs" --insecure \
        -H 'X-TenantID: cfd95b7e-3bc7-4006-a4a8-a73a79c71255' \
        -H "accept: application/json" \
        -H "Content-Type: application/json" \
        -u $LOGIN \
        -d "{
        \"unique_id\": \"${JOB_ID}\",
        \"description\": \"Automatically created by Nicks scripts\",
        \"parameters\": {
            \"file\": \"${TARGET_FILE_PATH}\"
            }
        }"


      sleep 10



  register: output_string
  ignore_errors: true
  args:
    executable: /bin/bash





- name: 🚀 TOPOLOGY - CREATE US NETWORK RISK TOPOLOGY OBSERVERS
  shell: |
    set -x



      echo "----------------------------------------------------------------------------------------------------------"
      echo "----------------------------------------------------------------------------------------------------------"
      echo "🚀 TOPOLOGY - COPY US NETWORK RISK TOPOLOGY TO POD - $TOPOLOGY_NAME"
      echo "----------------------------------------------------------------------------------------------------------"
      echo "Create Custom Topology - Copy Topology to File Observer"

      export TOPOLOGY_NAME=us-network-risk
      cd ansible

      # Get FILE_OBSERVER_POD
      FILE_OBSERVER_POD=$(oc get po -n $AIOPS_NAMESPACE -l app.kubernetes.io/instance=aiops-topology,app.kubernetes.io/name=file-observer -o jsonpath='{.items[0].metadata.name}')
      echo $FILE_OBSERVER_POD
      LOAD_FILE_NAME=$TOPOLOGY_NAME"-file.txt"

      OS=$(uname -s | tr '[:upper:]' '[:lower:]')
      if [[ "${OS}" == "darwin" ]]; then
            echo "MAC"
            FILE_OBSERVER_CAP=$(pwd)"/roles/ibm-aiops-demo-content/templates/topology/$LOAD_FILE_NAME"
      else
            FILE_OBSERVER_CAP="{{role_path}}/templates/topology/$LOAD_FILE_NAME"
      fi    
      echo $FILE_OBSERVER_POD
      echo $FILE_OBSERVER_CAP
      echo $TARGET_FILE_PATH
      TARGET_FILE_PATH="/opt/ibm/netcool/asm/data/file-observer/${LOAD_FILE_NAME}"
      echo "  Copying capture file [${FILE_OBSERVER_CAP}] to file observer pod"
      echo "oc cp -n $AIOPS_NAMESPACE ${FILE_OBSERVER_CAP} ${FILE_OBSERVER_POD}:${TARGET_FILE_PATH}"
      oc cp -n $AIOPS_NAMESPACE ${FILE_OBSERVER_CAP} ${FILE_OBSERVER_POD}:${TARGET_FILE_PATH}






      echo "----------------------------------------------------------------------------------------------------------"
      echo "----------------------------------------------------------------------------------------------------------"
      echo "🚀 TOPOLOGY - CREATE OVERLAY TOPOLOGY - $TOPOLOGY_NAME"
      echo "----------------------------------------------------------------------------------------------------------"
      echo "Create Custom Topology - Create File Observer Job"


      export AIOPS_NAMESPACE=$(oc get po -A|grep aiops-orchestrator-controller |awk '{print$1}')
      LOAD_FILE_NAME=$TOPOLOGY_NAME"-file.txt"
      TARGET_FILE_PATH="/opt/ibm/netcool/asm/data/file-observer/${LOAD_FILE_NAME}"


      # Get Credentials
      export TOPO_REST_USR=$(oc get secret aiops-topology-asm-credentials -n $AIOPS_NAMESPACE -o jsonpath='{.data.username}' | base64 --decode)
      export TOPO_REST_PWD=$(oc get secret aiops-topology-asm-credentials -n $AIOPS_NAMESPACE -o jsonpath='{.data.password}' | base64 --decode)
      export LOGIN="$TOPO_REST_USR:$TOPO_REST_PWD"

      export TOPO_ROUTE="https://"$(oc get route -n $AIOPS_NAMESPACE aiops-topology-file-observer -o jsonpath={.spec.host})
      export JOB_ID=$TOPOLOGY_NAME"-topology"

      echo "  URL: $TOPO_ROUTE"
      echo "  LOGIN: $LOGIN"
      echo "  JOB_ID: $JOB_ID"


      # Get FILE_OBSERVER JOB
      curl -X "POST" "$TOPO_ROUTE/1.0/file-observer/jobs" --insecure \
        -H 'X-TenantID: cfd95b7e-3bc7-4006-a4a8-a73a79c71255' \
        -H "accept: application/json" \
        -H "Content-Type: application/json" \
        -u $LOGIN \
        -d "{
        \"unique_id\": \"${JOB_ID}\",
        \"description\": \"Automatically created by Nicks scripts\",
        \"parameters\": {
            \"file\": \"${TARGET_FILE_PATH}\"
            }
        }"


      sleep 10



  register: output_string
  ignore_errors: true
  args:
    executable: /bin/bash










- name: 🚀 TOPOLOGY - CREATE EU RISK TOPOLOGY OBSERVERS
  shell: |
    set -x



      echo "----------------------------------------------------------------------------------------------------------"
      echo "----------------------------------------------------------------------------------------------------------"
      echo "🚀 TOPOLOGY - COPY EU RISK TOPOLOGY TO POD - $TOPOLOGY_NAME"
      echo "----------------------------------------------------------------------------------------------------------"
      echo "Create Custom Topology - Copy Topology to File Observer"

      export TOPOLOGY_NAME=risk-proximity-EU
      cd ansible

      # Get FILE_OBSERVER_POD
      FILE_OBSERVER_POD=$(oc get po -n $AIOPS_NAMESPACE -l app.kubernetes.io/instance=aiops-topology,app.kubernetes.io/name=file-observer -o jsonpath='{.items[0].metadata.name}')
      echo $FILE_OBSERVER_POD
      LOAD_FILE_NAME=$TOPOLOGY_NAME"-file.txt"

      OS=$(uname -s | tr '[:upper:]' '[:lower:]')
      if [[ "${OS}" == "darwin" ]]; then
            echo "MAC"
            FILE_OBSERVER_CAP=$(pwd)"/roles/ibm-aiops-demo-content/templates/topology/$LOAD_FILE_NAME"
      else
            FILE_OBSERVER_CAP="{{role_path}}/templates/topology/$LOAD_FILE_NAME"
      fi    
      echo $FILE_OBSERVER_POD
      echo $FILE_OBSERVER_CAP
      echo $TARGET_FILE_PATH
      TARGET_FILE_PATH="/opt/ibm/netcool/asm/data/file-observer/${LOAD_FILE_NAME}"
      echo "  Copying capture file [${FILE_OBSERVER_CAP}] to file observer pod"
      echo "oc cp -n $AIOPS_NAMESPACE ${FILE_OBSERVER_CAP} ${FILE_OBSERVER_POD}:${TARGET_FILE_PATH}"
      oc cp -n $AIOPS_NAMESPACE ${FILE_OBSERVER_CAP} ${FILE_OBSERVER_POD}:${TARGET_FILE_PATH}






      echo "----------------------------------------------------------------------------------------------------------"
      echo "----------------------------------------------------------------------------------------------------------"
      echo "🚀 TOPOLOGY - CREATE EU OVERLAY TOPOLOGY - $TOPOLOGY_NAME"
      echo "----------------------------------------------------------------------------------------------------------"
      echo "Create Custom Topology - Create File Observer Job"


      export AIOPS_NAMESPACE=$(oc get po -A|grep aiops-orchestrator-controller |awk '{print$1}')
      LOAD_FILE_NAME=$TOPOLOGY_NAME"-file.txt"
      TARGET_FILE_PATH="/opt/ibm/netcool/asm/data/file-observer/${LOAD_FILE_NAME}"


      # Get Credentials
      export TOPO_REST_USR=$(oc get secret aiops-topology-asm-credentials -n $AIOPS_NAMESPACE -o jsonpath='{.data.username}' | base64 --decode)
      export TOPO_REST_PWD=$(oc get secret aiops-topology-asm-credentials -n $AIOPS_NAMESPACE -o jsonpath='{.data.password}' | base64 --decode)
      export LOGIN="$TOPO_REST_USR:$TOPO_REST_PWD"

      export TOPO_ROUTE="https://"$(oc get route -n $AIOPS_NAMESPACE aiops-topology-file-observer -o jsonpath={.spec.host})
      export JOB_ID=$TOPOLOGY_NAME"-topology"

      echo "  URL: $TOPO_ROUTE"
      echo "  LOGIN: $LOGIN"
      echo "  JOB_ID: $JOB_ID"


      # Get FILE_OBSERVER JOB
      curl -X "POST" "$TOPO_ROUTE/1.0/file-observer/jobs" --insecure \
        -H 'X-TenantID: cfd95b7e-3bc7-4006-a4a8-a73a79c71255' \
        -H "accept: application/json" \
        -H "Content-Type: application/json" \
        -u $LOGIN \
        -d "{
        \"unique_id\": \"${JOB_ID}\",
        \"description\": \"Automatically created by Nicks scripts\",
        \"parameters\": {
            \"file\": \"${TARGET_FILE_PATH}\"
            }
        }"


      sleep 10



  register: output_string
  ignore_errors: true
  args:
    executable: /bin/bash





- name: 🚀 TOPOLOGY - CREATE RISK TOPOLOGY FILTERS
  shell: |
    set -x
        
    export AIOPS_NAMESPACE=$(oc get po -A|grep aiops-orchestrator-controller |awk '{print$1}')
    export CONSOLE_ROUTE=$(oc get route -n $AIOPS_NAMESPACE cp-console  -o jsonpath={.spec.host})          
    export CPD_ROUTE=$(oc get route -n $AIOPS_NAMESPACE cpd  -o jsonpath={.spec.host})          
    export CPADMIN_PWD=$(oc -n $AIOPS_NAMESPACE get secret platform-auth-idp-credentials -o jsonpath='{.data.admin_password}' | base64 -d && echo)
    export CPADMIN_USER=$(oc -n $AIOPS_NAMESPACE get secret platform-auth-idp-credentials -o jsonpath='{.data.admin_username}' | base64 -d && echo)
    export ACCESS_TOKEN=$(curl -s -k -H "Content-Type: application/x-www-form-urlencoded;charset=UTF-8" -d "grant_type=password&username=$CPADMIN_USER&password=$CPADMIN_PWD&scope=openid" https://$CONSOLE_ROUTE/idprovider/v1/auth/identitytoken|jq -r '.access_token')
    export ZEN_API_HOST=$(oc get route -n $AIOPS_NAMESPACE cpd -o jsonpath='{.spec.host}')
    export ZEN_TOKEN=$(curl -k -XGET https://$ZEN_API_HOST/v1/preauth/validateAuth \
    -H "username: $CPADMIN_USER" \
    -H "iam-token: $ACCESS_TOKEN"|jq -r '.accessToken')
    echo $ZEN_TOKEN

    export ROUTE=$(oc get route -n $AIOPS_NAMESPACE cpd -o jsonpath={.spec.host})


    # curl "https://$ROUTE/api/p/hdm_asm_ui_api/1.0/ui-api/userconfig/filters" \
    # -X 'GET' \
    # -H 'content-type: application/json' \
    # -H 'accept: */*' \
    # -H 'content-type: application/json' \
    # -H "Cookie: ___tk67142224=1655282500640; ibm-private-cloud-session=$ZEN_TOKEN" 


    curl "https://$ROUTE/api/p/hdm_asm_ui_api/1.0/ui-api/userconfig/filters" \
    -X 'POST' \
    -H 'content-type: application/json' \
    -H 'accept: */*' \
    -H 'content-type: application/json' \
    -H "Cookie: ___tk67142224=1655282500640; ibm-private-cloud-session=$ZEN_TOKEN" \
    -d '{ 
          "name": "My Network Equipment",
          "description": "Automatically created by Nicks scripts",
          "type": "inventory",
          "mode": "basic",
          "accessControlList": {
              "read": {
                  "teams": [],
                  "users": [
                      "*"
                  ]
              },
              "admin": {
                  "teams": [],
                  "users": [
                      "demo"
                  ]
              },
              "write": {
                  "teams": [],
                  "users": []
              }
            },
            "conditionSet": {
                "conditions": [{
                    "id": "filterBuilderCondition-myrouter",
                    "type": "condition",
                    "field": "entityTypes",
                    "operator": "includesAny",
                    "value": ["router","switch","location","networkinterface","fiberPort","fiberConnection"]
                }]
            }
    }'


    curl "https://$ROUTE/api/p/hdm_asm_ui_api/1.0/ui-api/userconfig/filters" \
    -X 'POST' \
    -H 'content-type: application/json' \
    -H 'accept: */*' \
    -H 'content-type: application/json' \
    -H "Cookie: ___tk67142224=1655282500640; ibm-private-cloud-session=$ZEN_TOKEN" \
    -d '{ 
          "name": "My Risks",
          "description": "Automatically created by Nicks scripts",
          "type": "inventory",
          "mode": "basic",
          "accessControlList": {
              "read": {
                  "teams": [],
                  "users": [
                      "*"
                  ]
              },
              "admin": {
                  "teams": [],
                  "users": [
                      "demo"
                  ]
              },
              "write": {
                  "teams": [],
                  "users": []
              }
            },
            "conditionSet": {
                "conditions": [{
                    "id": "filterBuilderCondition-myrisks",
                    "type": "condition",
                    "field": "entityTypes",
                    "operator": "includesAny",
                    "value": ["fire","alertHeadline","weatherAlert","wildfire","earthquake","storm","tsunami","volcano","avalanche","landslide","drought","heatwave","coldwave","wildfire","hazardousMaterialRelease","nuclearIncident"]
                }]
            }
    }'

  register: output_string
  ignore_errors: true
  args:
    executable: /bin/bash




- name: 🚀 TOPOLOGY - CREATE RISK TOPOLOGY TEMPLATES
  shell: |
    set -x
        


    export result=$(curl "https://$ROUTE/api/p/hdm_asm_ui_api/1.0/ui-api/templates?templateType=token" \
    -X 'POST' \
    -H 'content-type: application/json' \
    -H 'accept: */*' \
    -H 'content-type: application/json' \
    -H "Cookie: ___tk67142224=1655282500640; ibm-private-cloud-session=$ZEN_TOKEN" \
    -d ' {
      "keyIndexName": "topologyTemplate:inGroupTemplate",
      "templateType": "token",
      "description": "Automatically created by Nicks scripts",
      "extraProperties": {
        "correlatable": "true",
        "iconId": "network",
        "window": {
          "type": "rolling",
          "durationMS": 900000
        },
        "defaultHopType": "e2e"
      },
      "userId": "demo",
      "_groupCount": 0,
      "name": "inGroupTemplate",
      "entityTypes": [
        "TOKEN_TEMPLATE",
        "network",
        "templateArtifact"
      ]
    }')





    export result=$(curl "https://$ROUTE/api/p/hdm_asm_ui_api/1.0/ui-api/templates?templateType=token" \
    -X 'POST' \
    -H 'content-type: application/json' \
    -H 'accept: */*' \
    -H 'content-type: application/json' \
    -H "Cookie: ___tk67142224=1655282500640; ibm-private-cloud-session=$ZEN_TOKEN" \
    -d ' {
      "keyIndexName": "topologyTemplate:inGroupTemplate",
      "templateType": "token",
      "description": "Automatically created by Nicks scripts",
      "extraProperties": {
        "correlatable": "true",
        "iconId": "network",
        "window": {
          "type": "rolling",
          "durationMS": 900000
        },
        "defaultHopType": "e2e"
      },
      "userId": "demo",
      "_groupCount": 0,
      "name": "inGroupTemplate",
      "entityTypes": [
        "TOKEN_TEMPLATE",
        "network",
        "templateArtifact"
      ]
    }')

    export templateID=$(echo $result | jq -r '._id')
    echo $templateID

    curl "https://$ROUTE/api/p/hdm_asm_ui_api/1.0/ui-api/rules" \
    -X 'POST' \
    -H 'content-type: application/json' \
    -H 'accept: */*' \
    -H 'content-type: application/json' \
    -H "Cookie: ___tk67142224=1655282500640; ibm-private-cloud-session=$ZEN_TOKEN" \
    -d '{
        "name": "inGroupTemplate--inGroupRule",
        "ruleType": "groupPerTokenRule",
        "ruleStatus": "enabled",
        "tokens": ["inGroup"],
        "observers": [],
        "providers": [],
        "entityTypes": [],
        "templateName": "inGroupTemplate",
        "_references": [{
            "_fromId": "'${templateID}'",
            "_edgeType": "managesRule"
        }]
    }'




    curl "https://$ROUTE/api/p/hdm_asm_ui_api/1.0/ui-api/rules/" \
    -X 'GET' \
    -H 'content-type: application/json' \
    -H 'accept: */*' \
    -H 'content-type: application/json' \
    -H "Cookie: ___tk67142224=1655282500640; ibm-private-cloud-session=$ZEN_TOKEN" 



  register: output_string
  ignore_errors: true
  args:
    executable: /bin/bash




- name: 🚀 TOPOLOGY - RUN RISK TOPOLOGY OBSERVERS
  shell: |
    set -x
        
    export AIO_PLATFORM_ROUTE=$(oc get route -n $AIOPS_NAMESPACE aimanager-aio-controller -o jsonpath={.spec.host})

    echo "        Namespace:          $AIOPS_NAMESPACE"
    echo "        AIO_PLATFORM_ROUTE: $AIO_PLATFORM_ROUTE"
    echo ""

    echo "Sucessfully logged in" 
    echo ""
    echo "Running K8S OBSERVER"

    curl -X 'POST' --insecure \
      "https://$AIO_PLATFORM_ROUTE/v1/observer/runjob/risk-proximity-topology" \
      -H 'accept: application/json' \
      -H 'Content-Type: application/json' \
      -H "authorization: Bearer $ZEN_TOKEN"  

    curl -X 'POST' --insecure \
      "https://$AIO_PLATFORM_ROUTE/v1/observer/runjob/us-network-risk-topology" \
      -H 'accept: application/json' \
      -H 'Content-Type: application/json' \
      -H "authorization: Bearer $ZEN_TOKEN"  


    curl -X 'POST' --insecure \
      "https://$AIO_PLATFORM_ROUTE/v1/observer/runjob/risk-proximity-EU-topology" \
      -H 'accept: application/json' \
      -H 'Content-Type: application/json' \
      -H "authorization: Bearer $ZEN_TOKEN"  


  register: output_string
  ignore_errors: true
  args:
    executable: /bin/bash






# --------------------------------------------------------------------------------------------------------------------------------------
# AIOPS
# --------------------------------------------------------------------------------------------------------------------------------------
- name: 🚀 TOPOLOGY - CREATE MERGE RULES
  shell: |
    set -x
    
    echo "Create Rules - Starting..."
    
    export AIOPS_NAMESPACE=$(oc get po -A|grep aiops-orchestrator-controller |awk '{print$1}')

    export TOPOLOGY_REST_USR=$(oc get secret aiops-topology-asm-credentials -n $AIOPS_NAMESPACE -o jsonpath='{.data.username}' | base64 --decode)
    export TOPOLOGY_REST_PWD=$(oc get secret aiops-topology-asm-credentials -n $AIOPS_NAMESPACE -o jsonpath='{.data.password}' | base64 --decode)
    export LOGIN="$TOPOLOGY_REST_USR:$TOPOLOGY_REST_PWD"

    #oc delete route  topology-merge -n $AIOPS_NAMESPACE
    # oc create route passthrough topology-merge -n $AIOPS_NAMESPACE --insecure-policy="Redirect" --service=aiops-topology-merge --port=https-merge-api
    export MERGE_ROUTE="https://"$(oc get route -n $AIOPS_NAMESPACE aiops-topology-merge -o jsonpath={.spec.host})


    echo "    URL: $MERGE_ROUTE/1.0/merge/"
    echo "    LOGIN: $LOGIN"


    echo "  Wait 5 seconds"
    sleep 5



    echo "  Create Merge RULE... MergeTokenDeployNameRobotShop"
    curl -X "POST" "$MERGE_ROUTE/1.0/merge/rules" --insecure \
        -H 'X-TenantID: cfd95b7e-3bc7-4006-a4a8-a73a79c71255' \
        -H 'content-type: application/json' \
        -u $LOGIN \
        -d $'{
        "name": "MergeTokenDeployNameRobotShop",
        "ruleType": "mergeRule",
        "entityTypes": ["deployment","statefulset","container","router"],
        "tokens": ["name"],
        "ruleStatus": "enabled",
        "observers": ["*"],
        "providers": ["FILE.OBSERVER:robot-shop-file.txt"]
    }'

    echo "  Create Merge RULE... MergeTokenDeployNameSockShop"
    curl -X "POST" "$MERGE_ROUTE/1.0/merge/rules" --insecure \
        -H 'X-TenantID: cfd95b7e-3bc7-4006-a4a8-a73a79c71255' \
        -H 'content-type: application/json' \
        -u $LOGIN \
        -d $'{
        "name": "MergeTokenDeployNameSockShop",
        "ruleType": "mergeRule",
        "entityTypes": ["deployment","statefulset","container","router"],
        "tokens": ["name"],
        "ruleStatus": "enabled",
        "observers": ["*"],
        "providers": ["FILE.OBSERVER:sock-shop-file.txt", "KUBERNETES.OBSERVER:sock-shop"]
    }'


    echo "  Create Merge RULE... MergeTokenNetworkinterfacesIDRobotShop"
    curl -X "POST" "$MERGE_ROUTE/1.0/merge/rules" --insecure \
        -H 'X-TenantID: cfd95b7e-3bc7-4006-a4a8-a73a79c71255' \
        -H 'content-type: application/json' \
        -u $LOGIN \
        -d $'{
        "name": "MergeTokenNetworkinterfacesIDRobotShop",
        "ruleType": "mergeRule",
        "entityTypes": ["networkinterface"],
        "tokens": ["uniqueId"],
        "ruleStatus": "enabled",
        "observers": ["*"],
        "providers": ["FILE.OBSERVER:robot-shop-file.txt"]
    }'


    echo "  Create Merge RULE... MergeTokenNetworkinterfacesIDSockShop"
    curl -X "POST" "$MERGE_ROUTE/1.0/merge/rules" --insecure \
        -H 'X-TenantID: cfd95b7e-3bc7-4006-a4a8-a73a79c71255' \
        -H 'content-type: application/json' \
        -u $LOGIN \
        -d $'{
        "name": "MergeTokenNetworkinterfacesIDSockShop",
        "ruleType": "mergeRule",
        "entityTypes": ["networkinterface"],
        "tokens": ["uniqueId"],
        "ruleStatus": "enabled",
        "observers": ["*"],
        "providers": ["FILE.OBSERVER:sock-shop-file.txt"]
    }'

    echo "  Disable RULE k8ServiceName..."

    export RULE_ID=$(curl "$MERGE_ROUTE/1.0/merge/rules?ruleType=matchTokensRule&_filter=name=k8ServiceName&_include_count=false&_field=*" -s --insecure \
        -H 'X-TenantID: cfd95b7e-3bc7-4006-a4a8-a73a79c71255' \
        -u $LOGIN| jq -r "._items[0]._id")



    curl -XPUT "$MERGE_ROUTE/1.0/merge/rules/$RULE_ID" -s --insecure \
        --header 'Content-Type: application/json' \
        --header 'X-TenantID: cfd95b7e-3bc7-4006-a4a8-a73a79c71255' \
        -u $LOGIN \
        -d '{
          "name": "k8ServiceName",
          "keyIndexName": "k8ServiceName",
          "ruleType": "matchTokensRule",
          "entityTypes": [
            "service"
          ],
          "tokens": [
            "name"
          ],
          "ruleStatus": "disabled",
          
          "observers": [
            "kubernetes-observer"
          ],
          "providers": [
            "*"
          ]
        }' 


    echo "  Disable RULE instana-observer-events-kubernetes-service..."

    export RULE_ID=$(curl "$MERGE_ROUTE/1.0/merge/rules?ruleType=matchTokensRule&_filter=name=instana-observer-events-kubernetes-service&_include_count=false&_field=*" -s --insecure \
        -H 'X-TenantID: cfd95b7e-3bc7-4006-a4a8-a73a79c71255' \
        -u $LOGIN| jq -r "._items[0]._id")



    curl -XPUT "$MERGE_ROUTE/1.0/merge/rules/$RULE_ID" -s --insecure \
        --header 'Content-Type: application/json' \
        --header 'X-TenantID: cfd95b7e-3bc7-4006-a4a8-a73a79c71255' \
        -u $LOGIN \
        -d '{
          "name": "k8ServiceName",
          "keyIndexName": "k8ServiceName",
          "ruleType": "matchTokensRule",
          "entityTypes": [
            "service"
          ],
          "tokens": [
            "name"
          ],
          "ruleStatus": "disabled",
          
          "observers": [
            "kubernetes-observer"
          ],
          "providers": [
            "*"
          ]
        }' 



  register: output_string
  ignore_errors: true
  args:
    executable: /bin/bash



