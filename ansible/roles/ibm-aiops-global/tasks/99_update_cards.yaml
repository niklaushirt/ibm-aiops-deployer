

# *************************************************************************************************************************************************
# --------------------------------------------------------------------------------------------------------------------------------------
# Open Doc
# --------------------------------------------------------------------------------------------------------------------------------------
# *************************************************************************************************************************************************


- name: Log
  shell: |
    export MESSAGE=" üåè Update IBMAIOps Cards"
    export currentDate=$(date +%Y-%m-%d_%H:%M)
    echo "---------------------------------------------------------------------------------------------------------------------------------------------------" >> ../install_{{current_ibmaiops_feature.kind}}.log
    echo $currentDate" - "$MESSAGE  >> ../install_{{current_ibmaiops_feature.kind}}.log
  ignore_errors: true

- name: üì£ OCP CONSOLE - Create Openshift NOTIFICATION
  shell: |
    cat <<EOF | oc apply -f -
    apiVersion: console.openshift.io/v1
    kind: ConsoleNotification
    metadata:
      name: ibm-aiops-notification
    spec:
      backgroundColor: '#ffd500'
      color: '#000'
      location: {{global_config.position_ocp_notifications | default("BannerTop")}}
      text: 'Installing {{current_ibmaiops_feature.kind}} - Update IBMAIOps Cards'    
    EOF
  ignore_errors: true
  args:
    executable: /bin/bash
  when: global_config.create_ocp_notifications | default(true) == true  






- name: üåè ZEN CARDS - Update Cards
  block:
  - name:  üåè ZEN CARDS - Getting ZEN TOKEN
    shell: |
      export AIOPS_NAMESPACE=$(oc get po -A|grep aiops-orchestrator-controller |awk '{print$1}')
      if [ "${AIOPS_NAMESPACE}" != "" ]; then
        export ROUTE=$(oc get route -n $AIOPS_NAMESPACE cpd  -o jsonpath={.spec.host})          

        ZEN_API_HOST=$(oc get route -n $AIOPS_NAMESPACE cpd -o jsonpath='{.spec.host}')
        ZEN_LOGIN_URL="https://${ZEN_API_HOST}/v1/preauth/signin"
        LOGIN_USER=admin
        LOGIN_PASSWORD="$(oc get secret admin-user-details -n $AIOPS_NAMESPACE -o jsonpath='{ .data.initial_admin_password }' | base64 --decode)"

        ZEN_LOGIN_RESPONSE=$(
        curl -k \
        -H 'Content-Type: application/json' \
        -XPOST \
        "${ZEN_LOGIN_URL}" \
        -d '{
                "username": "'"${LOGIN_USER}"'",
                "password": "'"${LOGIN_PASSWORD}"'"
        }' 2> /dev/null
        )

        ZEN_LOGIN_MESSAGE=$(echo "${ZEN_LOGIN_RESPONSE}" | jq -r .message)

        if [ "${ZEN_LOGIN_MESSAGE}" != "success" ]; then
        echo "Login failed: ${ZEN_LOGIN_MESSAGE}" 1>&2

        exit 2
        fi

        ZEN_TOKEN=$(echo "${ZEN_LOGIN_RESPONSE}" | jq -r .token)
        echo "${ZEN_TOKEN}"
      else
        echo "Skipping: IBMAIOps not installed"
      fi
    ignore_errors: true
    register: output   
  - name: üöÄ ZEN CARDS - Set ZEN_TOKEN
    set_fact: ZEN_TOKEN={{ output.stdout_lines[0] | default("NONE")}} 
  - name: üü£  OUTPUT
    debug:
      var: ZEN_TOKEN
      verbosity: 1
          





  - name:  üßª ZEN CARDS - Delete All Custom Cards
    shell: |
      export AIOPS_NAMESPACE=$(oc get po -A|grep aiops-orchestrator-controller |awk '{print$1}')
      if [ "${AIOPS_NAMESPACE}" != "" ]; then
        export ROUTE=$(oc get route -n $AIOPS_NAMESPACE cpd  -o jsonpath={.spec.host})          
        curl -X "DELETE" -k "https://$ROUTE/zen-data/v1/custom_cards/welcomecard" -H "Authorization: Bearer {{ZEN_TOKEN}}" -H "Content-Type: application/json"
        curl -X "DELETE" -k "https://$ROUTE/zen-data/v1/custom_cards/aiopscard" -H "Authorization: Bearer {{ZEN_TOKEN}}" -H "Content-Type: application/json"
        curl -X "DELETE" -k "https://$ROUTE/zen-data/v1/custom_cards/appscard" -H "Authorization: Bearer {{ZEN_TOKEN}}" -H "Content-Type: application/json"
        curl -X "DELETE" -k "https://$ROUTE/zen-data/v1/custom_cards/systemcard" -H "Authorization: Bearer {{ZEN_TOKEN}}" -H "Content-Type: application/json"
      else
        echo "Skipping: IBMAIOps not installed"
      fi
    ignore_errors: true
    register: output
    args:
      executable: /bin/bash
  - name: üü£  OUTPUT
    debug:
      var: output.stdout_lines
      verbosity: 1
          



  - name:  üåè ZEN CARDS - Create Card WELCOME
    shell: |
      export AIOPS_NAMESPACE=$(oc get po -A|grep aiops-orchestrator-controller |awk '{print$1}')
      if [ "${AIOPS_NAMESPACE}" != "" ]; then

        export ROUTE=$(oc get route -n $AIOPS_NAMESPACE cpd  -o jsonpath={.spec.host})          
        demoURL=$(oc get routes -n $AIOPS_NAMESPACE-demo-ui ibm-aiops-demo-ui  -o jsonpath="{['spec']['host']}")

        export ROWS=""

        if [[ $demoURL =~ "demo-ui" ]]; then
        echo "DemoUI Present"
        ROWS=$ROWS'{"drilldown_url":  "https://'$demoURL'", "label": "üöÄ  Get started with the DemoUI ", "sub_text": "Token/Password:  {{current_ibmaiops_feature.demoui_pwd  | default( global_config.global_password )}}"},'
        fi
        ROWS=$ROWS'{"drilldown_url":  " ", "label": " ", "sub_text": " "},'

        ROWS=$ROWS'{"drilldown_url":  "https://github.com/niklaushirt/ibm-aiops-deployer#2-quick-install", "label": "Created with IBMAIOps-Deployer", "sub_text": "Built with ü§ç by Niklaus Hirt"},'

        PAYLOAD='{ "permissions": ["administrator"],  "window_open_target": "_blank",  "order": 1, "title": "üöÄ   Getting Started", "template_type": "text_list", "data": { "text_list_data": { "rows": [ { "drilldown_url": "", "label": "üê• Welcome to the {{global_config.environment_name | default("Demo")}} Environment", "sub_text": "" }, '$ROWS' { "drilldown_url": "", "label": " ", "sub_text": " " } ] } } } '
        echo "PAYLOAD:"$PAYLOAD
        echo "ENV:{{global_config.environment_name | default("Demo")}}"

        export result=$(curl -X "PUT" -k "https://$ROUTE/zen-data/v1/custom_cards/welcomecard" -H "Authorization: Bearer {{ZEN_TOKEN}}" -H "Content-Type: application/json" -d "$PAYLOAD")
        echo "      üîé Result: "
        echo "       "$result
      else
        echo "Skipping: IBMAIOps not installed"
      fi
    ignore_errors: true
    register: output
    args:
      executable: /bin/bash
  - name: üü£  OUTPUT
    debug:
      var: output.stdout_lines
      verbosity: 1
          




  - name:  üåè ZEN CARDS - Create Card AIOPS APPS
    shell: |
      export AIOPS_NAMESPACE=$(oc get po -A|grep aiops-orchestrator-controller |awk '{print$1}')
      if [ "${AIOPS_NAMESPACE}" != "" ]; then
        export ROUTE=$(oc get route -n $AIOPS_NAMESPACE cpd  -o jsonpath={.spec.host})          

        instanaURL=$(oc get routes -n instana-core dev-aiops -o jsonpath={.spec.host})
        turboURL=$(oc get route -n turbonomic nginx -o jsonpath={.spec.host})
        export ROWS=""

        if [[ $instanaURL =~ "dev-aiops" ]]; then
        echo "Instana Present"
        ROWS=$ROWS'{"drilldown_url":  "https://'$instanaURL'/#/applications", "label": "‚Üí   Instana", "sub_text": " "},'
        ROWS=$ROWS'{"drilldown_url":  "", "label": "", "sub_text": "User: admin@instana.local - Password: {{current_ibmaiops_feature.instana_admin_pass  | default( global_config.global_password )}} "},'
        fi
        if [[ $turboURL =~ "-turbonomic" ]]; then
        echo "Turbonomic Present"
        ROWS=$ROWS'{"drilldown_url":  "https://'$turboURL'", "label": "‚Üí   Turbonomic", "sub_text": " "},'
        ROWS=$ROWS'{"drilldown_url":  "", "label": "", "sub_text": "User: administrator - Password: {{current_ibmaiops_feature.turbo_admin_password  | default( global_config.global_password )}} "},'
        fi

        ROWS=$ROWS'{"drilldown_url":  "", "label": "Select your IBM AIOps Application above.", "sub_text": ""}'

        PAYLOAD='{ "permissions": ["administrator"], "window_open_target": "_blank", "order": 2, "title": "üü£   IBM Automation - AIOps", "template_type": "text_list", "data": { "text_list_data": { "rows": [ '$ROWS' ] } }}'
        echo "PAYLOAD:"$PAYLOAD

        echo "curl -X \"PUT\" -k \"https://$ROUTE/zen-data/v1/custom_cards/aiopscard\" -H \"Authorization: Bearer {{ZEN_TOKEN}}\" -H \"Content-Type: application/json\" -d \"$PAYLOAD\""

        export result=$(curl -X "PUT" -k "https://$ROUTE/zen-data/v1/custom_cards/aiopscard" -H "Authorization: Bearer {{ZEN_TOKEN}}" -H "Content-Type: application/json" -d "$PAYLOAD")
        echo "      üîé Result: "
        echo "       "$result
      else
        echo "Skipping: IBMAIOps not installed"
      fi
    ignore_errors: true
    register: output
    args:
      executable: /bin/bash
  - name: üü£  OUTPUT
    debug:
      var: output.stdout_lines
      verbosity: 1
             

  - name:  üåè ZEN CARDS - Create Card Incidents
    shell: |
      export AIOPS_NAMESPACE=$(oc get po -A|grep aiops-orchestrator-controller |awk '{print$1}')
      if [ "${AIOPS_NAMESPACE}" != "" ]; then
        export ROUTE=$(oc get route -n $AIOPS_NAMESPACE cpd  -o jsonpath={.spec.host})          
        export demoURL=$(oc get route -n $AIOPS_NAMESPACE-demo-ui ibm-aiops-demo-ui  -o jsonpath={.spec.host})          

        export ROWS=""

        ROWS=$ROWS'{"drilldown_url":  "", "label": "‚ùó Caution ‚ùó", "sub_text": "Just clicking below will create the incident"},'
        ROWS=$ROWS'{"drilldown_url":  "https://'$demoURL'/injectRESTHeadless?app=robotshop", "label": "üß® RobotShop - Memory Problem", "sub_text": ""},'
        ROWS=$ROWS'{"drilldown_url":  "https://'$demoURL'/injectRESTHeadless?app=sockshop", "label": "üß¶ SockShop - Network Problem", "sub_text": ""},'
        ROWS=$ROWS'{"drilldown_url":  "https://'$demoURL'/injectRESTHeadless?app=acme", "label": "‚úàÔ∏è ACME - Server Fan Outage", "sub_text": ""},'
        ROWS=$ROWS'{"drilldown_url":  "https://'$demoURL'/injectRESTHeadless?app=telco", "label": "üìµ Optical Network - Fiber Cut", "sub_text": ""},'
        ROWS=$ROWS'{"drilldown_url":  "https://'$demoURL'/injectRESTHeadless?app=tube", "label": "üî• London Tube - Fire Alert", "sub_text": ""},'
        ROWS=$ROWS'{"drilldown_url":  "https://'$demoURL'/injectRESTHeadless?app=clean", "label": "‚úÖ Clear all Incidents and Alerts", "sub_text": ""}'

        PAYLOAD='{ "permissions": ["administrator"],  "window_open_target": "_blank",  "order": 49, "title": "üî¥ Create Incidents", "template_type": "text_list", "data": { "text_list_data": { "rows": [  '$ROWS'  ] } } } '
        echo "PAYLOAD:"$PAYLOAD


        export result=$(curl -X "PUT" -k "https://$ROUTE/zen-data/v1/custom_cards/aiopsincident" -H "Authorization: Bearer {{ZEN_TOKEN}}" -H "Content-Type: application/json" -d "$PAYLOAD")
        echo "      üîé Result: "
        echo "       "$result
      else
        echo "Skipping: IBMAIOps not installed"
      fi
    ignore_errors: true
    register: output
    args:
      executable: /bin/bash
  - name: üü£  OUTPUT
    debug:
      var: output.stdout_lines
      verbosity: 1
             








  - name:  üåè ZEN CARDS - Create Card DEMO
    shell: |
      echo "       üõ†Ô∏è   Get Route"
      export AIOPS_NAMESPACE=$(oc get po -A|grep aiops-orchestrator-controller |awk '{print$1}')
      if [ "${AIOPS_NAMESPACE}" != "" ]; then

        export ROUTE=$(oc get route -n $AIOPS_NAMESPACE cpd  -o jsonpath={.spec.host})          


        appURL=$(oc get routes -n robot-shop robotshop  -o jsonpath="{['spec']['host']}")
        sockURL=$(oc get routes -n sock-shop front-end  -o jsonpath="{['spec']['host']}")
        ldapURL=$(oc get route -n openldap admin -o jsonpath={.spec.host})
        awxUrl=$(oc get route -n awx awx -o jsonpath={.spec.host})
        awxPwd=$(oc -n awx get secret awx-admin-password -o jsonpath='{.data.password}' | base64 --decode && echo)



        export ROWS=""

        if [[ $appURL =~ "robot-shop" ]]; then
        echo "RobotShop Present"
        ROWS=$ROWS'{"drilldown_url":  "https://'$appURL'", "label": "‚Üí  RobotShop", "sub_text": " "},'
        fi        
        if [[ $sockURL =~ "sock-shop" ]]; then
        echo "SockShop Present"
        ROWS=$ROWS'{"drilldown_url":  "https://'$sockURL'", "label": "‚Üí  SockShop", "sub_text": " "},'
        fi
        if [[ $ldapURL =~ "openldap" ]]; then
        echo "LDAP Present"
        ROWS=$ROWS'{"drilldown_url":  "https://'$ldapURL'", "label": "‚Üí  LDAP", "sub_text": " "},'
        ROWS=$ROWS'{"drilldown_url":  "", "label": " ", "sub_text": "User: cn=admin,dc=ibm,dc=com - Password: {{current_ibmaiops_feature.ldap_admin_password  | default( global_config.global_password )}} "},'
        fi
        if [[ $awxUrl =~ "awx" ]]; then
        echo "AWX Present"
        ROWS=$ROWS'{"drilldown_url":  "https://'$awxUrl'", "label": "‚Üí  Ansible Tower", "sub_text": " "},'
        ROWS=$ROWS'{"drilldown_url":  "", "label": " ", "sub_text": "User: admin - Password: '$awxPwd' "},'
        fi



        ROWS=$ROWS'{"drilldown_url":  "", "label": "Select your app above.", "sub_text": ""}'


        PAYLOAD='{ "permissions": ["administrator"], "window_open_target": "_blank", "order": 3, "title": "üîµ   Demo Apps", "template_type": "text_list", "data": { "text_list_data": { "rows": [ '$ROWS' ] } }}'
        echo "PAYLOAD:"$PAYLOAD

        curl -X "PUT" -k "https://$ROUTE/zen-data/v1/custom_cards/appscard" -H "Authorization: Bearer {{ZEN_TOKEN}}" -H "Content-Type: application/json" -d "$PAYLOAD"

        export result=$(curl -X "PUT" -k "https://$ROUTE/zen-data/v1/custom_cards/appscard" -H "Authorization: Bearer {{ZEN_TOKEN}}" -H "Content-Type: application/json" -d "$PAYLOAD")
        echo "      üîé Result: "
        echo "       "$result
      else
        echo "Skipping: IBMAIOps not installed"
      fi
    ignore_errors: true
    register: output
    args:
      executable: /bin/bash
  - name: üü£  OUTPUT
    debug:
      var: output.stdout_lines
      verbosity: 1
          




  - name:  üåè ZEN CARDS - Create Card SYSTEM
    shell: |
      echo "       üõ†Ô∏è   Get Route"
      export AIOPS_NAMESPACE=$(oc get po -A|grep aiops-orchestrator-controller |awk '{print$1}')
      if [ "${AIOPS_NAMESPACE}" != "" ]; then

        export ROUTE=$(oc get route -n $AIOPS_NAMESPACE cpd  -o jsonpath={.spec.host})          

        jobURL=$(oc get routes -n $AIOPS_NAMESPACE job-manager  -o jsonpath="{['spec']['host']}")
        jobPolicyURL=$(oc get routes -n $AIOPS_NAMESPACE job-manager-policy  -o jsonpath="{['spec']['host']}")
        sparkURL=$(oc get routes -n $AIOPS_NAMESPACE sparkadmin  -o jsonpath="{['spec']['host']}")
        ocpURL=$(oc get route -n openshift-console console -o jsonpath={.spec.host})


        export ROWS=""

        if [[ $jobURL =~ "job-manager" ]]; then
        echo "DemoUI Present"
        ROWS=$ROWS'{"drilldown_url":  "https://'$jobURL'", "label": "‚Üí Flink Task Manager - Ingestion", "sub_text": " "},'
        fi
        if [[ $jobPolicyURL =~ "job-manager" ]]; then
        echo "RobotShop Present"
        ROWS=$ROWS'{"drilldown_url":  "https://'$jobPolicyURL'", "label": "‚Üí Flink Task Manager - Policy Framework", "sub_text": " "},'
        fi
        if [[ $sparkURL =~ "sparkadmin" ]]; then
        echo "LDAP Present"
        ROWS=$ROWS'{"drilldown_url":  "https://'$sparkURL'", "label": "‚Üí Spark Master", "sub_text": " "},'
        fi
        if [[ $ocpURL =~ "openshift" ]]; then
        echo "OCP Present"
        ROWS=$ROWS'{"drilldown_url":  "https://'$ocpURL'", "label": "‚Üí Openshift Console", "sub_text": " "},'
        fi

        ROWS=$ROWS'{"drilldown_url":  "", "label": "Internal System Links", "sub_text": ""}'


        PAYLOAD='{ "permissions": ["administrator"], "window_open_target": "_blank", "order": 4, "title": "üß∞   System Links", "template_type": "text_list", "data": { "text_list_data": { "rows": [ '$ROWS' ] } }}'
        echo "PAYLOAD:"$PAYLOAD

        curl -X "PUT" -k "https://$ROUTE/zen-data/v1/custom_cards/systemcard" -H "Authorization: Bearer {{ZEN_TOKEN}}" -H "Content-Type: application/json" -d "$PAYLOAD"

        export result=$(curl -X "PUT" -k "https://$ROUTE/zen-data/v1/custom_cards/systemcard" -H "Authorization: Bearer {{ZEN_TOKEN}}" -H "Content-Type: application/json" -d "$PAYLOAD")
        echo "      üîé Result: "
        echo "       "$result
      else
        echo "Skipping: IBMAIOps not installed"
      fi

    ignore_errors: true
    register: output
    args:
      executable: /bin/bash
  - name: üü£  OUTPUT
    debug:
      var: output.stdout_lines
      verbosity: 1

  when: global_config.create_cards | default(true) == true  

